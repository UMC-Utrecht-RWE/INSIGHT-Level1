Res.values[[10]]<-Res.val.10
Res.overall[[10]]<-Res.o.10
Res.year[[10]]<-Res.y.10
Res.dates.person<-Res.d.p
}
if ("OBSERVATION_PERIODS" %in% names(tables_list)){
Res.11<-vector(mode="list", length=length(tables_list$OBSERVATION_PERIODS))
Res.val.11<-vector(mode="list", length=length(tables_list$OBSERVATION_PERIODS))
Res.o.11<-vector(mode="list", length=length(tables_list$OBSERVATION_PERIODS))
Res.m.11<-vector(mode="list", length=length(tables_list$OBSERVATION_PERIODS))
Res.my.11<-vector(mode="list", length=length(tables_list$OBSERVATION_PERIODS))
Res.d.11<-vector(mode="list", length=length(tables_list$OBSERVATION_PERIODS))
for (i in 1:length(tables_list$OBSERVATION_PERIODS)){
df<-fread(paste(path_dir, tables_list$OBSERVATION_PERIODS[i], sep=""), stringsAsFactors = FALSE)
df<-df[, lapply(.SD, FUN=function(x) gsub("^$|^ $", NA, x))]
Res.d.11[[i]]<-data.table(table_name="OBSERVATION_PERIODS", table_directory=tables_list$OBSERVATION_PERIODS[i], dates_check(dt=df, date_var1 = "op_start_date", date_var2 = "op_end_date", date_var3 = NULL))
var<-total_var[table_name=="OBSERVATION_PERIODS", variable_name]
#Use for saving list_of_values
voc_var<-vocabulary_var[table_name=="OBSERVATION_PERIODS", .(variable_name)]
a<-df[,lapply(.SD, FUN= function(x) all(is.na(x))), .SDcols=voc_var[["variable_name"]]]
b<-data.table(voc_var,t(a))
setnames(b, "V1", "empty")
value<-rep(NA, nrow(b))
if(nrow(b[variable_name=="op_origin" & empty==FALSE]) !=0){ value[1]=paste0(unique(df[!(is.na(op_origin)), op_origin]),collapse=" ")}
if(nrow(b[variable_name=="op_meaning" & empty==FALSE]) !=0){  value[2]=paste0(unique(df[!(is.na(op_meaning)), op_meaning]),collapse=" ")}
list_values<-data.table(b, values=value)
#Save results for empty check and values check
Res.11[[i]]<-data.table(table_name="OBSERVATION_PERIODS",empty_check(df, var))
Res.val.11[[i]]<-data.table(table_name="OBSERVATION_PERIODS", table_directory=tables_list$OBSERVATION_PERIODS[i], list_values)
Res.o.11[[i]]<-data.table(table_name="OBSERVATION_PERIODS", missing_overall(df))
Res.m.11[[i]]<-data.table(table_name="OBSERVATION_PERIODS", missing_meaning(df, "op_meaning"))
Res.my.11[[i]]<-data.table(table_name="OBSERVATION_PERIODS", missing_meaning_year(df, "op_meaning", "op_start_date"))
}
Res[[11]]<-Res.11
Res.values[[11]]<-Res.val.11
Res.overall[[11]]<-Res.o.11
Res.meaning[[11]]<-Res.m.11
Res.my[[11]]<-Res.my.11
Res.dates[[11]]<-Res.d.11
}
if ("PERSON_RELATIONSHIPS" %in% names(tables_list)){
Res.12<-vector(mode="list", length=length(tables_list$PERSON_RELATIONSHIPS))
Res.val.12<-vector(mode="list", length=length(tables_list$PERSON_RELATIONSHIPS))
Res.o.12<-vector(mode="list", length=length(tables_list$PERSON_RELATIONSHIPS))
Res.m.12<-vector(mode="list", length=length(tables_list$PERSON_RELATIONSHIPS))
for (i in 1:length(tables_list$PERSON_RELATIONSHIPS)){
df<-fread(paste(path_dir, tables_list$PERSON_RELATIONSHIPS[i], sep=""), stringsAsFactors = FALSE)
df<-df[, lapply(.SD, FUN=function(x) gsub("^$|^ $", NA, x))]
var<-total_var[table_name=="PERSON_RELATIONSHIPS", variable_name]
#There are no vacabulary variables for person_relationship
#Save results for empty check and values check
Res.12[[i]]<-data.table(table_name="PERSON_RELATIONSHIPS",empty_check(df, var))
Res.val.12[[i]]<-data.table(table_name="PERSON_RELATIONSHIPS", table_directory=tables_list$PERSON_RELATIONSHIPS[i], variable_name=NA, empty=NA, values=NA)
Res.o.12[[i]]<-data.table(table_name="PERSON_RELATIONSHIPS", missing_overall(df))
Res.m.12[[i]]<-data.table(table_name="PERSON_RELATIONSHIPS", missing_meaning(df, "meaning_of_relationship"))
}
Res[[12]]<-Res.12
Res.values[[12]]<-Res.val.12
Res.overall[[12]]<-Res.o.12
Res.meaning[[12]]<-Res.m.12
}
if ("PRODUCTS" %in% names(tables_list)){
Res.13<-vector(mode="list", length=length(tables_list$PRODUCTS))
Res.val.13<-vector(mode="list", length=length(tables_list$PRODUCTS))
Res.o.13<-vector(mode="list", length=length(tables_list$PRODUCTS))
for (i in 1:length(tables_list$PRODUCTS)){
df<-fread(paste(path_dir, tables_list$PRODUCTS[i], sep=""), stringsAsFactors = FALSE)
df<-df[, lapply(.SD, FUN=function(x) gsub("^$|^ $", NA, x))]
var<-total_var[table_name=="PRODUCTS", variable_name]
#Use for saving list_of_values
voc_var<-vocabulary_var[table_name=="PRODUCTS", .(variable_name)]
a<-df[,lapply(.SD, FUN= function(x) all(is.na(x))), .SDcols=voc_var[["variable_name"]]]
b<-data.table(voc_var,t(a))
setnames(b, "V1", "empty")
value<-rep(NA, nrow(b))
if(nrow(b[variable_name=="box_size_unit" & empty==FALSE]) !=0){ value[1]=paste0(unique(df[!(is.na(box_size_unit)), box_size_unit]),collapse=" ")}
if(nrow(b[variable_name=="drug_form" & empty==FALSE]) !=0){  value[2]=paste0(unique(df[!(is.na(drug_form)), drug_form]),collapse=" ")}
if(nrow(b[variable_name=="route_of_administration" & empty==FALSE]) !=0){ value[3]=paste0(unique(df[!(is.na(route_of_administration)), route_of_administration]),collapse=" ")}
list_values<-data.table(b, values=value)
#Save results for empty check and values check
Res.13[[i]]<-data.table(table_name="PRODUCTS",empty_check(df, var))
Res.val.13[[i]]<-data.table(table_name="PRODUCTS", table_directory=tables_list$PRODUCTS[i], list_values)
Res.o.13[[i]]<-data.table(table_name="PRODUCTS", missing_overall(df))
}
Res[[13]]<-Res.13
Res.values[[13]]<-Res.val.13
Res.overall[[13]]<-Res.o.13
}
if ("CDM_SOURCE" %in% names(tables_list)){
Res.14<-vector(mode="list", length=length(tables_list$CDM_SOURCE))
Res.val.14<-vector(mode="list", length=length(tables_list$CDM_SOURCE))
Res.o.14<-vector(mode="list", length=length(tables_list$CDM_SOURCE))
Res.d.14<-vector(mode="list", length=length(tables_list$CDM_SOURCE))
for (i in 1:length(tables_list$CDM_SOURCE)){
df<-fread(paste(path_dir, tables_list$CDM_SOURCE[i], sep=""), stringsAsFactors = FALSE)
df<-df[, lapply(.SD, FUN=function(x) gsub("^$|^ $", NA, x))]
Res.d.14[[i]]<-data.table(table_name="CDM_SOURCE", table_directory=tables_list$CDM_SOURCE[i], dates_check(dt=df, date_var1 = "date_creation", date_var2 = NULL, date_var3 = NULL))
var<-total_var[table_name=="CDM_SOURCE", variable_name]
#Use for saving list_of_values
voc_var<-vocabulary_var[table_name=="CDM_SOURCE", .(variable_name)]
a<-df[,lapply(.SD, FUN= function(x) all(is.na(x))), .SDcols=voc_var[["variable_name"]]]
b<-data.table(voc_var,t(a))
setnames(b, "V1", "empty")
value<-rep(NA, nrow(b))
if(nrow(b[variable_name=="data_access_provider_code" & empty==FALSE]) !=0){ value[1]=paste0(unique(df[!(is.na(data_access_provider_code)), data_access_provider_code]),collapse=" ")}
if(nrow(b[variable_name=="data_access_provider_name" & empty==FALSE]) !=0){  value[2]=paste0(unique(df[!(is.na(data_access_provider_name)), data_access_provider_name]),collapse=" ")}
if(nrow(b[variable_name=="cdm_vocabulary_version" & empty==FALSE]) !=0){ value[3]=paste0(unique(df[!(is.na(cdm_vocabulary_version)), cdm_vocabulary_version]),collapse=" ")}
if(nrow(b[variable_name=="cdm_version" & empty==FALSE]) !=0){ value[4]=paste0(unique(df[!(is.na(cdm_version)), cdm_version]),collapse=" ")}
list_values<-data.table(b, values=value)
#Save results for empty check and values check
Res.14[[i]]<-data.table(table_name="CDM_SOURCE",empty_check(df, var))
Res.val.14[[i]]<-data.table(table_name="CDM_SOURCE", table_directory=tables_list$CDM_SOURCE[i], list_values)
Res.o.14[[i]]<-data.table(table_name="CDM_SOURCE", missing_overall(df))
}
Res[[14]]<-Res.14
Res.values[[14]]<-Res.val.14
Res.overall[[14]]<-Res.o.14
Res.dates[[14]]<-Res.d.14
}
if ("INSTANCE" %in% names(tables_list)){
Res.15<-vector(mode="list", length=length(tables_list$INSTANCE))
Res.val.15<-vector(mode="list", length=length(tables_list$INSTANCE))
Res.o.15<-vector(mode="list", length=length(tables_list$INSTANCE))
Res.d.15<-vector(mode="list", length=length(tables_list$INSTANCE))
for (i in 1:length(tables_list$INSTANCE)){
df<-fread(paste(path_dir, tables_list$INSTANCE[i], sep=""), stringsAsFactors = FALSE)
df<-df[, lapply(.SD, FUN=function(x) gsub("^$|^ $", NA, x))]
Res.d.15[[i]]<-data.table(table_name="INSTANCE", table_directory=tables_list$INSTANCE[i], dates_check(dt=df, date_var1 = "date_when_data_last_updated", date_var2 = "since_when_data_complete", date_var3 = "up_to_when_data_complete"))
var<-total_var[table_name=="INSTANCE", variable_name]
#Use for saving list_of_values
voc_var<-vocabulary_var[table_name=="INSTANCE", .(variable_name)]
a<-df[,lapply(.SD, FUN= function(x) all(is.na(x))), .SDcols=voc_var[["variable_name"]]]
b<-data.table(voc_var,t(a))
setnames(b, "V1", "empty")
value<-rep(NA, nrow(b))
if(nrow(b[variable_name=="source_table_name" & empty==FALSE]) !=0){ value[1]=paste0(unique(df[!(is.na(source_table_name)), source_table_name]),collapse=" ")}
if(nrow(b[variable_name=="source_column_name" & empty==FALSE]) !=0){  value[2]=paste0(unique(df[!(is.na(source_column_name)), source_column_name]),collapse=" ")}
if(nrow(b[variable_name=="included_in_instance" & empty==FALSE]) !=0){ value[3]=paste0(unique(df[!(is.na(included_in_instance)), included_in_instance]),collapse=" ")}
if(nrow(b[variable_name=="date_when_data_last_updated" & empty==FALSE]) !=0){ value[4]=paste0(unique(df[!(is.na(date_when_data_last_updated)), date_when_data_last_updated]),collapse=" ")}
if(nrow(b[variable_name=="since_when_data_complete" & empty==FALSE]) !=0){ value[5]=paste0(unique(df[!(is.na(since_when_data_complete)), since_when_data_complete]),collapse=" ")}
if(nrow(b[variable_name=="up_to_when_data_complete" & empty==FALSE]) !=0){ value[6]=paste0(unique(df[!(is.na(up_to_when_data_complete)), up_to_when_data_complete]),collapse=" ")}
if(nrow(b[variable_name=="restriction_in_values" & empty==FALSE]) !=0){ value[7]=paste0(unique(df[!(is.na(restriction_in_values)), restriction_in_values]),collapse=" ")}
if(nrow(b[variable_name=="list_of_values" & empty==FALSE]) !=0){ value[8]=paste0(unique(df[!(is.na(list_of_values)), list_of_values]),collapse=" ")}
list_values<-data.table(b, values=value)
#Save results for empty check and values check
Res.15[[i]]<-data.table(table_name="INSTANCE",empty_check(df, var))
Res.val.15[[i]]<-data.table(table_name="INSTANCE", table_directory=tables_list$INSTANCE[i], list_values)
Res.o.15[[i]]<-data.table(table_name="INSTANCE", missing_overall(df))
}
Res[[15]]<-Res.15
Res.values[[15]]<-Res.val.15
Res.overall[[15]]<-Res.o.15
Res.dates[[15]]<-Res.d.15
}
suppressPackageStartupMessages(library(plyr))
#Remove empty list elements
Res<-compact(Res)
Res.values<-compact(Res.values)
Res.overall<-compact(Res.overall)
Res.meaning<-compact(Res.meaning)
Res.year<-compact(Res.year)
Res.my<-compact(Res.my)
Res.dates<-compact(Res.dates)
Res.dates.person<-compact(Res.dates.person)
if (length(Res.overall) !=0){
for(i in 1:length(Res.overall)){
Res.overall[[i]]<-do.call(rbind, Res.overall[[i]])
}
}
if (length(Res.meaning) !=0){
for(i in 1:length(Res.meaning)){
Res.meaning[[i]]<-do.call(rbind, Res.meaning[[i]])
}}
if(length(Res.year) !=0){
for(i in 1:length(Res.year)){
Res.year[[i]]<-do.call(rbind, Res.year[[i]])
}}
if (length(Res.my)){
for(i in 1:length(Res.my)){
Res.my[[i]]<-do.call(rbind, Res.my[[i]])
}}
if (length(Res.dates) !=0){
for(i in 1:length(Res.dates)){
Res.dates[[i]]<-do.call(rbind, Res.dates[[i]])
}}
if (length(Res.dates.person) !=0){
Res.dates.person<-do.call(rbind, Res.dates.person)}
output<-list("EMPTY"=Res, "VALUES"=Res.values, "MISS_OVERALL"=Res.overall, "MISS_MEANING"=Res.meaning, "MISS_YEAR"=Res.year,
"MISS_MEAN_YEAR"=Res.my, "DATES"=Res.dates, "DATES_PERSON"=Res.dates.person)
return(output)
}
```
```{r run_presence_check, echo=FALSE}
#Run script
Res<-presence_lowercase_check(actual_tables, tables_CDM)
```
<br>
<div class = 'box1'>
General information
<br>
Conventions for Step 1 to Step 3:
**1.**All variables need to be present as column names even if empty.
**2.**Variable names need to be written in lowercase.
**3.**All mandatory variables need to be present.
**4.**Presence of non-mandatory variables should match the information that has been filled out in the metadata table.
**5.**All vocabularies need to be filled out in the metadata table.
**6.**Variables should contain only allowable vocabulary values.
**7.**All date parts need to contain allowable values where year from 1890-present, month 01-12 and day 01-31 (with some exceptions).
**8.**Dates need to be written in the right format(8 characters).
**9.**All conventions need to be statisfied.
</div>
<br>
<div class = 'box2'>
## 1. Table formatting
<br>
#### **Presence of variables check**
Check if variables are present as names in the CDM tables.
```{r output_presence_check, echo=FALSE}
suppressPackageStartupMessages(library(DT))
Res.presence<-do.call(rbind,Res$PRESENCE)
Res.presence_check<-Res.presence[presence==FALSE]
#Output for presence check
if (nrow(Res.presence_check)!=0){
datatable(data.table(Res.presence_check, comment="The variable is missing as column in the current table."), option=list(scrollX=TRUE))
} else {print("All variables are present as columns for all tables included in the working directory.")}
```
```{r update_list_of_tables, include=FALSE}
# If Res.presence_check has more than 0 rows the script below will update the actual_tables
#list so that the script can continue for further analysis
if (nrow(Res.presence_check)==0){
actual_tables.r<-actual_tables
} else {
remove<-Res.presence_check[,table_name]
directory_CDM.r<-directory_CDM[!directory_CDM %in% remove]
actual_tables.r<-sapply(tables_CDM, function(y){directory_CDM.r[grepl(pattern = y, x = directory_CDM.r)]})
for (i in length(actual_tables.r):1){
if (length(actual_tables.r[[i]])==0){
actual_tables.r[[i]]<-NULL
}
}
}
```
<br>
suppressPackageStartupMessages(library(DT))
Res.presence<-do.call(rbind,Res$PRESENCE)
Res.presence_check<-Res.presence[presence==FALSE]
#Output for presence check
if (nrow(Res.presence_check)!=0){
datatable(data.table(Res.presence_check, comment="The variable is missing as column in the current table."), option=list(scrollX=TRUE))
} else {print("All variables are present as columns for all tables included in the working directory.")}
# If Res.presence_check has more than 0 rows the script below will update the actual_tables
#list so that the script can continue for further analysis
if (nrow(Res.presence_check)==0){
actual_tables.r<-actual_tables
} else {
remove<-Res.presence_check[,table_name]
directory_CDM.r<-directory_CDM[!directory_CDM %in% remove]
actual_tables.r<-sapply(tables_CDM, function(y){directory_CDM.r[grepl(pattern = y, x = directory_CDM.r)]})
for (i in length(actual_tables.r):1){
if (length(actual_tables.r[[i]])==0){
actual_tables.r[[i]]<-NULL
}
}
}
#The output of the lowercase check.
#Output for the lowercase check
Res.lowercase<- data.table(do.call(rbind,Res$LOWERCASE))
if(nrow(Res.lowercase[lowercase==FALSE]) == 0){
print("All variables are written in lowercase.")
} else {
datatable(Res.lowercase[lowercase==FALSE],option=list(scrollX=TRUE))
}
#Result for empty_values check
#Run script
Results<-level_1_check(tables_list =actual_tables.r,tables_CDM =  tables_CDM)
#Function that will combine retrieve all empty columns for all tables
empty_datatable<-function(Res){
#Combine list elements
for(i in 1:length(Res)){
Res[[i]]<-do.call(rbind, Res[[i]])
}
Res.t<-do.call(rbind, Res)
#Create unique combination of table_name and variable_name
Res.t$variable<-paste(Res.t$table_name, Res.t$variable_name, sep=":")
variable.t<-rep(NA, length(unique(Res.t$variable)))
empty.t<-rep(NA, length(unique(Res.t$variable)))
#Check if a variable is empty after combine different subtables if present
for (i in 1:length(unique(Res.t$variable))){
if(length(unique(Res.t[variable== unique(Res.t$variable)[i]][,empty]))==1){
if (unique(Res.t[variable== unique(Res.t$variable)[i]][,empty])==TRUE){
variable.t[i]<-unique(Res.t[variable== unique(Res.t$variable)[i]][,variable])
empty.t[i]<-TRUE
} else {
variable.t[i]<-unique(Res.t[variable== unique(Res.t$variable)[i]][,variable])
empty.t[i]<-FALSE
}
} else {
variable.t[i]<-unique(Res.t[variable== unique(Res.t$variable)[i]][,variable])
empty.t[i]<-FALSE
}
}
Res.empty<-data.table(cbind(reshape2::colsplit(variable.t, ":", names = c("table_name", "variable_name")),  "empty"=empty.t))
return(Res.empty)
}
if (length(Results$EMPTY) !=0){
empty_list_var<-empty_datatable(Res= Results$EMPTY)
} else {
empty_list_var<-NULL
}
#Retrieve values for all variables that have a vocabulary
values_datatable<-function(Res){
for(i in 1:length(Res)){
Res[[i]]<-do.call(rbind, Res[[i]])
}
Res<-data.table(do.call(rbind, Res))
Res<-Res[!(empty==TRUE)]
return(Res)
}
if (length(Results$VALUES)!=0){
values_list<-values_datatable(Res= Results$VALUES)
}
if (length(actual_tables.r) !=0){
Res.mandatory<-mandatory_check(tables_list=actual_tables.r, tables_CDM=tables_CDM)
} else {
print("This check might not be performed in case all tables included in the directory had a previous error in presence of variables check. Fix the problem first and then run the script again.")
}
suppressPackageStartupMessages(library(DT))
if(length(actual_tables.r) !=0){
#The output of mandatory variables check.
if(is.null(Res.mandatory)){
print("All mandatory variables are present for all the tables in the working directory.")
} else {
datatable(data.table(Res.mandatory, comment="This variable is completely empty."), option=list(scrollX=TRUE))
}
}
#Run script
if (length(actual_tables.r) !=0){
Res.non_mandatory<-non.mandatory_check(actual_tables.r, tables_CDM)
} else {
print("This check might not be performed in case all tables included in the directory had a previous error in presence of variables check. Fix the problem first and then run the script again.")
}
suppressPackageStartupMessages(library(DT))
#The output for metadata check
if (length(actual_tables.r) !=0){
if (is.null(Res.non_mandatory)){
print("The presence of all non-mandatory table for each CDM is according to the METADATA table.")
} else {
datatable(Res.non_mandatory, option=list(scrollX=TRUE))
}
}
if (length(actual_tables.r) !=0){
Res.vocabulary<-vocabulary_check(actual_tables.r, tables_CDM)
} else {
print("This check might not be performed in case all tables included in the directory had a previous error in presence of variables check. Fix the problem first and then run the script again.")
}
suppressPackageStartupMessages(library(DT))
if(length(actual_tables.r) !=0){
#The output for vocabularies check
#Output
if(is.null(Res.vocabulary)){
print("All vocabularies are present in the METADATA table.")
} else {
datatable(Res.vocabulary, option=list(scrollX=TRUE))
}
}
suppressPackageStartupMessages(library(DT))
if (length(actual_tables.r) !=0){
#The output for values check
#Run script
Res.values<-values_check(tables_list, tables_CDM)
if(nrow(Res.values[error==TRUE])==0){
print("The list of variables in the tables match the information in the METADATA table.")
} else {
Res.values.f<-Res.values[error==TRUE]
Res.values.f[(is.na(table_directory) & !(is.na(values_metadata))), format:=0]
Res.values.f[(!(is.na(values_table)) & is.na(values_metadata)), format:=1]
Res.values.f[(!(is.na(values_table)) & !(is.na(values_metadata))), format:=2]
datatable(Res.values.f, option=list(scrollX=TRUE, columnDefs = list(list(targets = 7, visible = FALSE)))) %>% formatStyle(
'table_name', 'format',
color = styleEqual(c(0,1,2), c('red', 'green', 'blue'))
) %>% formatStyle(
'table_name', 'format',
color = styleEqual(c(0,1,2), c('bold', 'bold', 'bold'))
)
}
} else {
print("This check might not be performed in case all tables included in the directory had a previous error in presence of variables check. Fix the problem first and then run the script again. Ignore if only tables that do not contain vocabulary values are included in the directory.")
}
suppressPackageStartupMessages(library(DT))
Res.presence<-do.call(rbind,Res$PRESENCE)
Res.presence_check<-Res.presence[presence==FALSE]
#Output for presence check
if (nrow(Res.presence_check)!=0){
datatable(data.table(Res.presence_check, comment="The variable is missing as column in the current table."), option=list(scrollX=TRUE))
} else {print("All variables are present as columns for all tables included in the working directory.")}
#Result for empty_values check
#Run script
Results<-level_1_check(tables_list =actual_tables.r,tables_CDM =  tables_CDM)
#Function that will combine retrieve all empty columns for all tables
empty_datatable<-function(Res){
#Combine list elements
for(i in 1:length(Res)){
Res[[i]]<-do.call(rbind, Res[[i]])
}
Res.t<-do.call(rbind, Res)
#Create unique combination of table_name and variable_name
Res.t$variable<-paste(Res.t$table_name, Res.t$variable_name, sep=":")
variable.t<-rep(NA, length(unique(Res.t$variable)))
empty.t<-rep(NA, length(unique(Res.t$variable)))
#Check if a variable is empty after combine different subtables if present
for (i in 1:length(unique(Res.t$variable))){
if(length(unique(Res.t[variable== unique(Res.t$variable)[i]][,empty]))==1){
if (unique(Res.t[variable== unique(Res.t$variable)[i]][,empty])==TRUE){
variable.t[i]<-unique(Res.t[variable== unique(Res.t$variable)[i]][,variable])
empty.t[i]<-TRUE
} else {
variable.t[i]<-unique(Res.t[variable== unique(Res.t$variable)[i]][,variable])
empty.t[i]<-FALSE
}
} else {
variable.t[i]<-unique(Res.t[variable== unique(Res.t$variable)[i]][,variable])
empty.t[i]<-FALSE
}
}
Res.empty<-data.table(cbind(reshape2::colsplit(variable.t, ":", names = c("table_name", "variable_name")),  "empty"=empty.t))
return(Res.empty)
}
if (length(Results$EMPTY) !=0){
empty_list_var<-empty_datatable(Res= Results$EMPTY)
} else {
empty_list_var<-NULL
}
#Retrieve values for all variables that have a vocabulary
values_datatable<-function(Res){
for(i in 1:length(Res)){
Res[[i]]<-do.call(rbind, Res[[i]])
}
Res<-data.table(do.call(rbind, Res))
Res<-Res[!(empty==TRUE)]
return(Res)
}
if (length(Results$VALUES)!=0){
values_list<-values_datatable(Res= Results$VALUES)
}
if (length(actual_tables.r) !=0){
Res.mandatory<-mandatory_check(tables_list=actual_tables.r, tables_CDM=tables_CDM)
} else {
print("This check might not be performed in case all tables included in the directory had a previous error in presence of variables check. Fix the problem first and then run the script again.")
}
suppressPackageStartupMessages(library(DT))
if(length(actual_tables.r) !=0){
#The output of mandatory variables check.
if(is.null(Res.mandatory)){
print("All mandatory variables are present for all the tables in the working directory.")
} else {
datatable(data.table(Res.mandatory, comment="This variable is completely empty."), option=list(scrollX=TRUE))
}
}
#Run script
if (length(actual_tables.r) !=0){
Res.non_mandatory<-non.mandatory_check(actual_tables.r, tables_CDM)
} else {
print("This check might not be performed in case all tables included in the directory had a previous error in presence of variables check. Fix the problem first and then run the script again.")
}
suppressPackageStartupMessages(library(DT))
#The output for metadata check
if (length(actual_tables.r) !=0){
if (is.null(Res.non_mandatory)){
print("The presence of all non-mandatory table for each CDM is according to the METADATA table.")
} else {
datatable(Res.non_mandatory, option=list(scrollX=TRUE))
}
}
if (length(actual_tables.r) !=0){
Res.vocabulary<-vocabulary_check(actual_tables.r, tables_CDM)
} else {
print("This check might not be performed in case all tables included in the directory had a previous error in presence of variables check. Fix the problem first and then run the script again.")
}
suppressPackageStartupMessages(library(DT))
if(length(actual_tables.r) !=0){
#The output for vocabularies check
#Output
if(is.null(Res.vocabulary)){
print("All vocabularies are present in the METADATA table.")
} else {
datatable(Res.vocabulary, option=list(scrollX=TRUE))
}
}
suppressPackageStartupMessages(library(DT))
if (length(actual_tables.r) !=0){
#The output for values check
#Run script
Res.values<-values_check(tables_list, tables_CDM)
if(nrow(Res.values[error==TRUE])==0){
print("The list of variables in the tables match the information in the METADATA table.")
} else {
Res.values.f<-Res.values[error==TRUE]
Res.values.f[(is.na(table_directory) & !(is.na(values_metadata))), format:=0]
Res.values.f[(!(is.na(values_table)) & is.na(values_metadata)), format:=1]
Res.values.f[(!(is.na(values_table)) & !(is.na(values_metadata))), format:=2]
datatable(Res.values.f, option=list(scrollX=TRUE, columnDefs = list(list(targets = 7, visible = FALSE)))) %>% formatStyle(
'table_name', 'format',
color = styleEqual(c(0,1,2), c('red', 'green', 'blue'))
) %>% formatStyle(
'table_name', 'format',
color = styleEqual(c(0,1,2), c('bold', 'bold', 'bold'))
)
}
} else {
print("This check might not be performed in case all tables included in the directory had a previous error in presence of variables check. Fix the problem first and then run the script again. Ignore if only tables that do not contain vocabulary values are included in the directory.")
}
count.fields("/Users/vhoxhaj/Desktop/Tables/METADATA.csv")
